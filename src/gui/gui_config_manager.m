function handles = gui_config_manager(parent, handles)
%% 配置管理模块
% 负责分析配置的设置和管理
%
% 功能:
% - 基本配置设置 (模型类型、语言)
% - 输出设置 (保存选项、格式选择)
% - 分析类型选择
% - 高级选项设置
% - 配置的保存和加载
%
% 输入:
%   parent - 父容器对象
%   handles - GUI句柄结构体
%
% 输出:  
%   handles - 更新后的句柄结构体

    % 配置面板 - 调整高度
    configPanel = uipanel('Parent', parent, ...
                         'Title', '⚙️ 分析配置', ...
                         'Position', [0.02, 0.02, 0.96, 0.72], ...
                         'FontSize', 10, ...
                         'FontWeight', 'bold', ...
                         'ForegroundColor', [0.2, 0.6, 0.2]);
    
    %% 基本配置区域
    y_pos = 520;
    
    % 基本设置分组
    uicontrol('Parent', configPanel, ...
              'Style', 'text', ...
              'String', '📋 基本设置', ...
              'Position', [10, y_pos+15, 100, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0.3, 0.3, 0.7]);
    
    % 模型类型
    uicontrol('Parent', configPanel, ...
              'Style', 'text', ...
              'String', '模型类型:', ...
              'Position', [15, y_pos-5, 70, 18], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 9);
    
    handles.modelTypePopup = uicontrol('Parent', configPanel, ...
                                      'Style', 'popupmenu', ...
                                      'String', {'半车模型 (Half-car)', '四分之一车模型 (Quarter-car)'}, ...
                                      'Position', [95, y_pos-7, 190, 25], ...
                                      'FontSize', 9, ...
                                      'BackgroundColor', 'white', ...
                                      'Callback', {@updateConfig, handles});
    
    % 语言设置
    y_pos = y_pos - 30;
    uicontrol('Parent', configPanel, ...
              'Style', 'text', ...
              'String', '界面语言:', ...
              'Position', [15, y_pos, 70, 18], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 9);
    
    handles.languagePopup = uicontrol('Parent', configPanel, ...
                                     'Style', 'popupmenu', ...
                                     'String', {'中文 (CN)', '英文 (EN)'}, ...
                                     'Position', [95, y_pos-2, 130, 25], ...
                                     'FontSize', 9, ...
                                     'BackgroundColor', 'white', ...
                                     'Callback', {@updateConfig, handles});
    
    %% 输出设置分组
    y_pos = y_pos - 50;
    uicontrol('Parent', configPanel, ...
              'Style', 'text', ...
              'String', '💾 输出设置', ...
              'Position', [10, y_pos+15, 100, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0.6, 0.3, 0.6]);
    
    y_pos = y_pos - 10;
    % 保存图片选项
    y_pos = y_pos - 30;
    handles.savePlotsCheck = uicontrol('Parent', configPanel, ...
                                      'Style', 'checkbox', ...
                                      'String', '保存图片', ...
                                      'Position', [10, y_pos, 80, 20], ...
                                      'Value', 1, ...
                                      'FontSize', 9, ...
                                      'Callback', {@updateConfig, handles});
    
    % 图片格式
    uicontrol('Parent', configPanel, ...
              'Style', 'text', ...
              'String', '格式:', ...
              'Position', [100, y_pos, 40, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 9);
    
    handles.plotFormatPopup = uicontrol('Parent', configPanel, ...
                                       'Style', 'popupmenu', ...
                                       'String', {'PNG', 'EPS', 'PDF'}, ...
                                       'Position', [140, y_pos-2, 70, 25], ...
                                       'FontSize', 9, ...
                                       'BackgroundColor', 'white', ...
                                       'Callback', {@updateConfig, handles});
    
    % 保存.fig文件选项
    y_pos = y_pos - 25;
    handles.saveFigFilesCheck = uicontrol('Parent', configPanel, ...
                                         'Style', 'checkbox', ...
                                         'String', '保存.fig文件', ...
                                         'Position', [10, y_pos, 100, 20], ...
                                         'Value', 1, ...
                                         'FontSize', 9, ...
                                         'Callback', {@updateConfig, handles});
    
    % 关闭图窗选项
    handles.closeFiguresCheck = uicontrol('Parent', configPanel, ...
                                         'Style', 'checkbox', ...
                                         'String', '保存后关闭图窗', ...
                                         'Position', [120, y_pos, 120, 20], ...
                                         'Value', 1, ...
                                         'FontSize', 9, ...
                                         'Callback', {@updateConfig, handles});
    
    %% 时间戳文件夹设置
    y_pos = y_pos - 35;
    handles.useTimestampCheck = uicontrol('Parent', configPanel, ...
                                         'Style', 'checkbox', ...
                                         'String', '使用时间戳文件夹', ...
                                         'Position', [10, y_pos, 130, 20], ...
                                         'Value', 1, ...
                                         'FontSize', 9, ...
                                         'Callback', {@updateConfig, handles});
    
    % 自定义输出文件夹
    y_pos = y_pos - 30;
    uicontrol('Parent', configPanel, ...
              'Style', 'text', ...
              'String', '输出文件夹:', ...
              'Position', [10, y_pos, 80, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 9);
    
    handles.outputFolderEdit = uicontrol('Parent', configPanel, ...
                                        'Style', 'edit', ...
                                        'Position', [90, y_pos, 200, 22], ...
                                        'FontSize', 9, ...
                                        'Enable', 'off', ...
                                        'BackgroundColor', [0.95, 0.95, 0.95], ...
                                        'Callback', {@updateConfig, handles});
    
    uicontrol('Parent', configPanel, ...
              'Style', 'pushbutton', ...
              'String', '浏览', ...
              'Position', [295, y_pos, 50, 22], ...
              'FontSize', 8, ...
              'BackgroundColor', [0.9, 0.95, 1], ...
              'Callback', {@browseOutputFolder, handles});
    
    % 分析类型分组
    y_pos = y_pos - 50;
    uicontrol('Parent', configPanel, ...
              'Style', 'text', ...
              'String', '📈 分析类型', ...
              'Position', [10, y_pos+15, 100, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0.3, 0.6, 0.3]);
    
    y_pos = y_pos - 10;
    handles.freqAnalysisCheck = uicontrol('Parent', configPanel, ...
                                         'Style', 'checkbox', ...
                                         'String', '频率响应分析', ...
                                         'Position', [15, y_pos, 130, 20], ...
                                         'Value', 1, ...
                                         'FontSize', 9, ...
                                         'Callback', {@updateConfig, handles});
    
    handles.timeAnalysisCheck = uicontrol('Parent', configPanel, ...
                                         'Style', 'checkbox', ...
                                         'String', '时域响应分析', ...
                                         'Position', [155, y_pos, 130, 20], ...
                                         'Value', 1, ...
                                         'FontSize', 9, ...
                                         'Callback', {@updateConfig, handles});
    
    y_pos = y_pos - 25;
    handles.rmsAnalysisCheck = uicontrol('Parent', configPanel, ...
                                        'Style', 'checkbox', ...
                                        'String', 'RMS对比分析', ...
                                        'Position', [15, y_pos, 130, 20], ...
                                        'Value', 1, ...
                                        'FontSize', 9, ...
                                        'Callback', {@updateConfig, handles});
    
    handles.statAnalysisCheck = uicontrol('Parent', configPanel, ...
                                         'Style', 'checkbox', ...
                                         'String', '统计分析', ...
                                         'Position', [155, y_pos, 130, 20], ...
                                         'Value', 1, ...
                                         'FontSize', 9, ...
                                         'Callback', {@updateConfig, handles});
    
    %% 高级选项分组
    y_pos = y_pos - 60;
    uicontrol('Parent', configPanel, ...
              'Style', 'text', ...
              'String', '⚙️ 高级选项', ...
              'Position', [10, y_pos+15, 100, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 10, ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0.7, 0.3, 0.3]);
    
    % 参考频率
    y_pos = y_pos - 10;
    uicontrol('Parent', configPanel, ...
              'Style', 'text', ...
              'String', '参考频率 (Hz):', ...
              'Position', [15, y_pos, 100, 18], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 9);
    
    handles.refFreqEdit = uicontrol('Parent', configPanel, ...
                                   'Style', 'edit', ...
                                   'String', '1, 10', ...
                                   'Position', [120, y_pos-2, 100, 22], ...
                                   'FontSize', 9, ...
                                   'BackgroundColor', 'white', ...
                                   'Callback', {@updateConfig, handles});
    
    % 配置管理按钮 - 优化布局
    y_pos = y_pos - 50;
    uicontrol('Parent', configPanel, ...
              'Style', 'pushbutton', ...
              'String', '🔄 默认配置', ...
              'Position', [15, y_pos, 90, 28], ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'BackgroundColor', [0.9, 0.95, 1], ...
              'Callback', {@loadDefaultConfig, handles});
    
    uicontrol('Parent', configPanel, ...
              'Style', 'pushbutton', ...
              'String', '💾 保存配置', ...
              'Position', [115, y_pos, 90, 28], ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'BackgroundColor', [0.9, 1, 0.9], ...
              'Callback', {@saveConfig, handles});
    
    uicontrol('Parent', configPanel, ...
              'Style', 'pushbutton', ...
              'String', '📁 加载配置', ...
              'Position', [215, y_pos, 90, 28], ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'BackgroundColor', [1, 0.98, 0.9], ...
              'Callback', {@loadConfig, handles});

end

%% 更新配置
function updateConfig(src, ~, handles)
    handles = get(handles.fig, 'UserData');
    
    try
        % 获取GUI控件值
        model_types = {'half', 'quarter'};
        model_type = model_types{get(handles.modelTypePopup, 'Value')};
        
        languages = {'cn', 'en'};
        language = languages{get(handles.languagePopup, 'Value')};
        
        % 确保checkbox值转换为逻辑类型
        save_plots = logical(get(handles.savePlotsCheck, 'Value'));
        save_fig_files = logical(get(handles.saveFigFilesCheck, 'Value'));
        close_figures = logical(get(handles.closeFiguresCheck, 'Value'));
        
        formats = {'png', 'eps', 'pdf'};
        plot_format = formats{get(handles.plotFormatPopup, 'Value')};
        
        % 确保所有checkbox值都转换为逻辑类型
        use_timestamp = logical(get(handles.useTimestampCheck, 'Value'));
        output_folder = get(handles.outputFolderEdit, 'String');
        
        % 更新时间戳文件夹设置的界面状态
        if use_timestamp
            set(handles.outputFolderEdit, 'Enable', 'off');
        else
            set(handles.outputFolderEdit, 'Enable', 'on');
        end
        
        % 创建新配置
        if use_timestamp || isempty(output_folder)
            config = quick_config('ModelType', model_type, ...
                                 'Language', language, ...
                                 'SavePlots', save_plots, ...
                                 'SaveFigFiles', save_fig_files, ...
                                 'CloseFigures', close_figures, ...
                                 'UseTimestamp', true, ...
                                 'PlotFormat', plot_format);
        else
            config = quick_config('ModelType', model_type, ...
                                 'Language', language, ...
                                 'SavePlots', save_plots, ...
                                 'SaveFigFiles', save_fig_files, ...
                                 'CloseFigures', close_figures, ...
                                 'UseTimestamp', false, ...
                                 'OutputFolder', output_folder, ...
                                 'PlotFormat', plot_format);
        end
        
        % 更新分析选项 - 确保所有checkbox值都转换为逻辑类型
        config.analysis.frequency_response = logical(get(handles.freqAnalysisCheck, 'Value'));
        config.analysis.time_domain = logical(get(handles.timeAnalysisCheck, 'Value'));
        config.analysis.rms_comparison = logical(get(handles.rmsAnalysisCheck, 'Value'));
        config.analysis.statistical = logical(get(handles.statAnalysisCheck, 'Value'));
        
        % 更新参考频率
        ref_freq_str = get(handles.refFreqEdit, 'String');
        try
            ref_freq = str2num(ref_freq_str); %#ok<ST2NM>
            if isnumeric(ref_freq) && ~isempty(ref_freq)
                config.plot.reference_lines = ref_freq;
            end
        catch
            % 忽略参考频率解析错误
        end
        
        % 保存配置，并保留已有的数据顺序映射（如果有）
        if isfield(handles, 'config') && isfield(handles.config, 'data_order_mapping')
            config.data_order_mapping = handles.config.data_order_mapping;
        end
        handles.config = config;
        handles.results_folder = config.output_folder;
        
        % 检查模型类型是否发生变化，如果变化则更新信号列表
        if isfield(handles, 'previous_model_type')
            if ~strcmp(handles.previous_model_type, model_type)
                % 模型类型发生变化，更新信号列表
                if isfield(handles, 'signalList')
                    gui_utils('updateSignalList', model_type, handles);
                end
            end
        else
            % 第一次设置，也更新信号列表
            if isfield(handles, 'signalList')
                gui_utils('updateSignalList', model_type, handles);
            end
        end
        handles.previous_model_type = model_type;
        
        % 更新结果文件夹显示
        if isfield(handles, 'resultsFolderText')
            set(handles.resultsFolderText, 'String', config.output_folder);
        end
        
        % 保存handles
        set(handles.fig, 'UserData', handles);
        
    catch ME
        gui_utils('addLog', handles, sprintf('配置更新失败: %s', ME.message));
    end
end

%% 浏览输出文件夹
function browseOutputFolder(~, ~, handles)
    handles = get(handles.fig, 'UserData');
    
    folder = uigetdir(pwd, '选择输出文件夹');
    if folder ~= 0
        set(handles.outputFolderEdit, 'String', folder);
        updateConfig([], [], handles);
    end
end

%% 加载默认配置
function loadDefaultConfig(~, ~, handles)
    handles = get(handles.fig, 'UserData');
    
    try
        config = quick_config('half', 'cn', true);
        handles.config = config;
        handles.results_folder = config.output_folder;
        
        updateGUIFromConfig(handles);
        if isfield(handles, 'resultsFolderText')
            set(handles.resultsFolderText, 'String', config.output_folder);
        end
        
        % 更新信号列表为默认半车模型
        if isfield(handles, 'signalList')
            gui_utils('updateSignalList', 'half', handles);
        end
        handles.previous_model_type = 'half';
        
        gui_utils('addLog', handles, '已加载默认配置');
        set(handles.fig, 'UserData', handles);
    catch ME
        gui_utils('addLog', handles, sprintf('加载默认配置失败: %s', ME.message));
    end
end

%% 保存配置
function saveConfig(~, ~, handles)
    handles = get(handles.fig, 'UserData');
    
    if isempty(handles.config)
        msgbox('没有配置可保存', '提示', 'warn');
        return;
    end
    
    [filename, pathname] = uiputfile('*.mat', '保存配置文件', 'suspension_config.mat');
    
    if isequal(filename, 0)
        return;
    end
    
    try
        config = handles.config; %#ok<NASGU>
        save(fullfile(pathname, filename), 'config');
        gui_utils('addLog', handles, sprintf('配置已保存至: %s', filename));
        msgbox('配置保存成功', '提示', 'help');
    catch ME
        gui_utils('addLog', handles, sprintf('保存配置失败: %s', ME.message));
        msgbox('配置保存失败', '错误', 'error');
    end
end

%% 加载配置
function loadConfig(~, ~, handles)
    handles = get(handles.fig, 'UserData');
    
    [filename, pathname] = uigetfile('*.mat', '加载配置文件');
    
    if isequal(filename, 0)
        return;
    end
    
    try
        loaded_data = load(fullfile(pathname, filename));
        if isfield(loaded_data, 'config')
            handles.config = loaded_data.config;
            handles.results_folder = handles.config.output_folder;
            
            updateGUIFromConfig(handles);
            if isfield(handles, 'resultsFolderText')
                set(handles.resultsFolderText, 'String', handles.config.output_folder);
            end
            
            % 根据加载的配置更新信号列表
            if isfield(handles, 'signalList') && isfield(handles.config, 'model_type')
                gui_utils('updateSignalList', handles.config.model_type, handles);
                handles.previous_model_type = handles.config.model_type;
            end
            
            gui_utils('addLog', handles, sprintf('配置已从 %s 加载', filename));
            set(handles.fig, 'UserData', handles);
            msgbox('配置加载成功', '提示', 'help');
        else
            gui_utils('addLog', handles, '配置文件格式无效');
            msgbox('配置文件格式无效', '错误', 'error');
        end
    catch ME
        gui_utils('addLog', handles, sprintf('加载配置失败: %s', ME.message));
        msgbox('配置加载失败', '错误', 'error');
    end
end

%% 从配置更新GUI控件 (简化版本，主要功能在main_gui.m中)
function updateGUIFromConfig(handles)
    if isempty(handles.config)
        return;
    end
    
    config = handles.config;
    
    % 模型类型
    if isfield(handles, 'modelTypePopup')
        if strcmp(config.model_type, 'half')
            set(handles.modelTypePopup, 'Value', 1);
        else
            set(handles.modelTypePopup, 'Value', 2);
        end
    end
    
    % 语言
    if isfield(handles, 'languagePopup')
        if strcmp(config.language, 'cn')
            set(handles.languagePopup, 'Value', 1);
        else
            set(handles.languagePopup, 'Value', 2);
        end
    end
    
    % 保存选项
    if isfield(handles, 'savePlotsCheck')
        set(handles.savePlotsCheck, 'Value', config.save_plots);
    end
    
    if isfield(config, 'save_fig_files') && isfield(handles, 'saveFigFilesCheck')
        set(handles.saveFigFilesCheck, 'Value', config.save_fig_files);
    end
    
    if isfield(config, 'close_figures') && isfield(handles, 'closeFiguresCheck')
        set(handles.closeFiguresCheck, 'Value', config.close_figures);
    end
    
    % 图片格式
    if isfield(handles, 'plotFormatPopup')
        formats = {'png', 'eps', 'pdf'};
        format_idx = find(strcmp(config.plot_format, formats), 1);
        if ~isempty(format_idx)
            set(handles.plotFormatPopup, 'Value', format_idx);
        end
    end
    
    % 时间戳文件夹
    if isfield(config, 'use_timestamp_folder') && isfield(handles, 'useTimestampCheck')
        set(handles.useTimestampCheck, 'Value', config.use_timestamp_folder);
        if config.use_timestamp_folder && isfield(handles, 'outputFolderEdit')
            set(handles.outputFolderEdit, 'Enable', 'off');
        elseif isfield(handles, 'outputFolderEdit')
            set(handles.outputFolderEdit, 'Enable', 'on');
            set(handles.outputFolderEdit, 'String', config.output_folder);
        end
    end
    
    % 分析选项
    if isfield(config, 'analysis')
        if isfield(handles, 'freqAnalysisCheck')
            set(handles.freqAnalysisCheck, 'Value', config.analysis.frequency_response);
        end
        if isfield(handles, 'timeAnalysisCheck')
            set(handles.timeAnalysisCheck, 'Value', config.analysis.time_domain);
        end
        if isfield(handles, 'rmsAnalysisCheck')
            set(handles.rmsAnalysisCheck, 'Value', config.analysis.rms_comparison);
        end
        if isfield(handles, 'statAnalysisCheck')
            set(handles.statAnalysisCheck, 'Value', config.analysis.statistical);
        end
    end
    
    % 参考频率
    if isfield(config, 'plot') && isfield(config.plot, 'reference_lines') && isfield(handles, 'refFreqEdit')
        if ~isempty(config.plot.reference_lines)
            ref_str = sprintf('%.1f, ', config.plot.reference_lines);
            ref_str = ref_str(1:end-2); % 移除最后的逗号和空格
            set(handles.refFreqEdit, 'String', ref_str);
        end
    end
end