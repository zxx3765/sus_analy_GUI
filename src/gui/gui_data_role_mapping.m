function handles = gui_data_role_mapping(parent, handles)
%% 数据角色映射GUI模块
% 让用户指定哪个数据对应被动悬架、设计算法等
%
% 输入:
%   parent - 父容器对象
%   handles - GUI句柄结构体
%
% 输出:  
%   handles - 更新后的句柄结构体

    % 数据角色映射面板
    rolePanel = uipanel('Parent', parent, ...
                       'Title', '🎯 数据角色映射', ...
                       'Position', [0.02, 0.02, 0.96, 0.96], ...
                       'FontSize', 10, ...
                       'FontWeight', 'bold', ...
                       'BackgroundColor', [1.0, 0.98, 0.95], ...
                       'ForegroundColor', [0.7, 0.3, 0.1]);
    
    % 说明文字
    uicontrol('Parent', rolePanel, ...
              'Style', 'text', ...
              'String', ['📝 请指定数据对应的悬架类型，以获得正确的绘图样式:', newline, ...
                        '• 被动悬架: 蓝色虚线', newline, ...
                        '• 设计算法: 黑色粗实线'], ...
              'Position', [15, 430, 200, 60], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 9, ...
              'ForegroundColor', [0.4, 0.4, 0.4]);
    
    % === 被动悬架设置 ===
    uicontrol('Parent', rolePanel, ...
              'Style', 'text', ...
              'String', '🔵 被动悬架:', ...
              'Position', [15, 395, 80, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0, 0.4470, 0.7410]);
    
    handles.passiveDropdown = uicontrol('Parent', rolePanel, ...
                                       'Style', 'popupmenu', ...
                                       'String', {'(未选择)', '数据1', '数据2', '数据3'}, ...
                                       'Position', [100, 395, 100, 25], ...
                                       'FontSize', 9, ...
                                       'Value', 1, ...
                                       'Callback', {@onRoleMappingChange, handles});
    
    % === 设计算法设置 ===
    uicontrol('Parent', rolePanel, ...
              'Style', 'text', ...
              'String', '🎯 设计算法:', ...
              'Position', [15, 365, 80, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0, 0, 0]);
    
    handles.designedDropdown = uicontrol('Parent', rolePanel, ...
                                        'Style', 'popupmenu', ...
                                        'String', {'(未选择)', '数据1', '数据2', '数据3'}, ...
                                        'Position', [100, 365, 100, 25], ...
                                        'FontSize', 9, ...
                                        'Value', 1, ...
                                        'Callback', {@onRoleMappingChange, handles});
    
    % === 半主动悬架设置（可选）===
    uicontrol('Parent', rolePanel, ...
              'Style', 'text', ...
              'String', '🟡 半主动悬架:', ...
              'Position', [15, 335, 80, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0.8500, 0.3250, 0.0980]);
    
    handles.semiactiveDropdown = uicontrol('Parent', rolePanel, ...
                                          'Style', 'popupmenu', ...
                                          'String', {'(未选择)', '数据1', '数据2', '数据3'}, ...
                                          'Position', [100, 335, 100, 25], ...
                                          'FontSize', 9, ...
                                          'Value', 1, ...
                                          'Callback', {@onRoleMappingChange, handles});
    
    % === 主动悬架设置（可选）===
    uicontrol('Parent', rolePanel, ...
              'Style', 'text', ...
              'String', '🟠 主动悬架:', ...
              'Position', [15, 305, 80, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0.9290, 0.6940, 0.1250]);
    
    handles.activeDropdown = uicontrol('Parent', rolePanel, ...
                                      'Style', 'popupmenu', ...
                                      'String', {'(未选择)', '数据1', '数据2', '数据3'}, ...
                                      'Position', [100, 305, 100, 25], ...
                                      'FontSize', 9, ...
                                      'Value', 1, ...
                                      'Callback', {@onRoleMappingChange, handles});
    
    % === 参考控制器设置（可选）===
    uicontrol('Parent', rolePanel, ...
              'Style', 'text', ...
              'String', '🟣 参考控制器:', ...
              'Position', [15, 275, 80, 20], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'ForegroundColor', [0.4940, 0.1840, 0.5560]);
    
    handles.referenceDropdown = uicontrol('Parent', rolePanel, ...
                                         'Style', 'popupmenu', ...
                                         'String', {'(未选择)', '数据1', '数据2', '数据3'}, ...
                                         'Position', [100, 275, 100, 25], ...
                                         'FontSize', 9, ...
                                         'Value', 1, ...
                                         'Callback', {@onRoleMappingChange, handles});
    
    % === 自动映射按钮 ===
    uicontrol('Parent', rolePanel, ...
              'Style', 'pushbutton', ...
              'String', '🤖 智能映射', ...
              'Position', [15, 240, 90, 25], ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'BackgroundColor', [0.4, 0.8, 0.4], ...
              'ForegroundColor', 'white', ...
              'Callback', {@autoMapping, handles});
    
    % === 清除映射按钮 ===
    uicontrol('Parent', rolePanel, ...
              'Style', 'pushbutton', ...
              'String', '🗑️ 清除映射', ...
              'Position', [115, 240, 90, 25], ...
              'FontSize', 9, ...
              'BackgroundColor', [0.9, 0.9, 0.9], ...
              'Callback', {@clearMapping, handles});
    
    % === 映射状态显示 ===
    uicontrol('Parent', rolePanel, ...
              'Style', 'text', ...
              'String', '📊 当前映射状态:', ...
              'Position', [15, 210, 100, 18], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 9, ...
              'FontWeight', 'bold');
    
    handles.mappingStatusText = uicontrol('Parent', rolePanel, ...
                                         'Style', 'text', ...
                                         'String', '(未设置)', ...
                                         'Position', [15, 150, 190, 55], ...
                                         'HorizontalAlignment', 'left', ...
                                         'FontSize', 8, ...
                                         'ForegroundColor', [0.5, 0.5, 0.5]);
    
    % === 预览按钮 ===
    uicontrol('Parent', rolePanel, ...
              'Style', 'pushbutton', ...
              'String', '👁️ 预览样式', ...
              'Position', [15, 110, 90, 30], ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'BackgroundColor', [0.2, 0.6, 0.9], ...
              'ForegroundColor', 'white', ...
              'Callback', {@previewStyles, handles});
    
    % === 应用映射按钮 ===
    uicontrol('Parent', rolePanel, ...
              'Style', 'pushbutton', ...
              'String', '✅ 应用映射', ...
              'Position', [115, 110, 90, 30], ...
              'FontSize', 9, ...
              'FontWeight', 'bold', ...
              'BackgroundColor', [0.1, 0.7, 0.1], ...
              'ForegroundColor', 'white', ...
              'Callback', {@applyMapping, handles});
    
    % === 帮助信息 ===
    help_text = ['💡 使用说明：', newline, ...
                '1. 导入数据后选择各数据的角色', newline, ...
                '2. 被动悬架使用蓝色虚线', newline, ...
                '3. 设计算法使用黑色粗实线', newline, ...
                '4. 点击应用映射后运行分析'];
    
    uicontrol('Parent', rolePanel, ...
              'Style', 'text', ...
              'String', help_text, ...
              'Position', [15, 10, 190, 95], ...
              'HorizontalAlignment', 'left', ...
              'FontSize', 8, ...
              'ForegroundColor', [0.4, 0.4, 0.4]);
    
    % 初始化映射状态
    updateMappingStatus(handles);
    
end

%% 更新下拉列表选项 - 独立函数供外部调用
function updateDataRoleDropdowns(handles)
    if ~isfield(handles, 'data') || isempty(handles.data)
        % 没有数据时使用默认选项
        data_options = {'(未选择)', '数据1', '数据2', '数据3'};
    else
        % 根据实际数据生成选项
        num_datasets = length(handles.data);
        data_options = cell(1, num_datasets + 1);
        data_options{1} = '(未选择)';
        
        for i = 1:num_datasets
            if isfield(handles, 'labels') && length(handles.labels) >= i
                data_options{i+1} = sprintf('数据%d: %s', i, handles.labels{i});
            else
                data_options{i+1} = sprintf('数据%d', i);
            end
        end
    end
    
    % 更新所有下拉列表
    dropdowns = {'passiveDropdown', 'designedDropdown', 'semiactiveDropdown', ...
                'activeDropdown', 'referenceDropdown'};
    
    for i = 1:length(dropdowns)
        if isfield(handles, dropdowns{i}) && ishandle(handles.(dropdowns{i}))
            set(handles.(dropdowns{i}), 'String', data_options);
            % 如果当前选择超出了新的范围，重置为未选择
            current_val = get(handles.(dropdowns{i}), 'Value');
            if current_val > length(data_options)
                set(handles.(dropdowns{i}), 'Value', 1);
            end
        end
    end
end

%% 回调函数 - 角色映射改变
function onRoleMappingChange(~, ~, handles)
    handles = get(handles.fig, 'UserData');
    updateMappingStatus(handles);
    gui_utils('addLog', handles, '数据角色映射已更新');
end

%% 智能映射
function autoMapping(~, ~, handles)
    handles = get(handles.fig, 'UserData');
    
    if ~isfield(handles, 'data') || isempty(handles.data)
        msgbox('请先导入数据', '提示', 'warn');
        return;
    end
    
    num_datasets = length(handles.data);
    
    % 智能映射逻辑
    if num_datasets >= 2
        % 第一个数据设为被动悬架
        set(handles.passiveDropdown, 'Value', 2);  % 数据1
        
        % 最后一个数据设为设计算法
        set(handles.designedDropdown, 'Value', num_datasets + 1);  % 最后一个数据
        
        % 如果有3个以上数据，中间的设为半主动
        if num_datasets >= 3
            set(handles.semiactiveDropdown, 'Value', 3);  % 数据2
        end
        
        updateMappingStatus(handles);
        gui_utils('addLog', handles, '智能映射已完成');
        msgbox('智能映射完成！第一个数据设为被动悬架，最后一个设为设计算法', '智能映射', 'help');
    else
        msgbox('至少需要2个数据集才能进行智能映射', '提示', 'warn');
    end
end

%% 清除映射
function clearMapping(~, ~, handles)
    handles = get(handles.fig, 'UserData');
    
    % 重置所有下拉列表为未选择
    dropdowns = {'passiveDropdown', 'designedDropdown', 'semiactiveDropdown', ...
                'activeDropdown', 'referenceDropdown'};
    
    for i = 1:length(dropdowns)
        if isfield(handles, dropdowns{i})
            set(handles.(dropdowns{i}), 'Value', 1);
        end
    end
    
    updateMappingStatus(handles);
    gui_utils('addLog', handles, '数据角色映射已清除');
end

%% 预览样式
function previewStyles(~, ~, handles)
    handles = get(handles.fig, 'UserData');
    
    % 获取当前映射
    mapping = getCurrentMapping(handles);
    
    if isempty(fieldnames(mapping))
        msgbox('请先设置数据角色映射', '提示', 'warn');
        return;
    end
    
    try
        % 创建预览图
        preview_fig = figure('Name', '数据角色样式预览', 'Position', [200, 200, 500, 350]);
        
        % 生成示例数据
        t = 0:0.01:5;
        num_data = 3;
        example_labels = {'数据1', '数据2', '数据3'};
        
        % 生成配置
        config = struct();
        config.data_role_mapping = mapping;
        config.debug = true;
        
        % 获取样式
        [line_styles, colors, line_widths] = get_data_role_styles(example_labels, mapping, config);
        
        % 绘制示例
        hold on;
        for i = 1:num_data
            y = sin(2*pi*t + (i-1)*pi/3) * exp(-0.1*t);
            plot(t, y, line_styles{i}, 'LineWidth', line_widths(i), ...
                 'Color', colors(i,:), 'DisplayName', example_labels{i});
        end
        
        xlabel('时间 (s)');
        ylabel('示例信号');
        title('数据角色样式预览');
        legend('Location', 'best');
        grid on;
        
        gui_utils('addLog', handles, '样式预览已生成');
        
    catch ME
        gui_utils('addLog', handles, sprintf('样式预览失败: %s', ME.message));
    end
end

%% 应用映射
function applyMapping(~, ~, handles)
    handles = get(handles.fig, 'UserData');
    
    % 获取当前映射
    mapping = getCurrentMapping(handles);
    
    % 保存到配置中
    if isfield(handles, 'config')
        handles.config.data_role_mapping = mapping;
    else
        handles.config = struct();
        handles.config.data_role_mapping = mapping;
    end
    
    % 更新句柄
    set(handles.fig, 'UserData', handles);
    
    updateMappingStatus(handles);
    gui_utils('addLog', handles, '数据角色映射已应用到分析配置');
    
    if ~isempty(fieldnames(mapping))
        msgbox('数据角色映射已应用！运行分析时将使用指定的绘图样式', '应用成功', 'help');
    end
end

%% 获取当前映射
function mapping = getCurrentMapping(handles)
    mapping = struct();
    
    % 被动悬架
    passive_val = get(handles.passiveDropdown, 'Value');
    if passive_val > 1
        mapping.passive_index = passive_val - 1;
    end
    
    % 设计算法
    designed_val = get(handles.designedDropdown, 'Value');
    if designed_val > 1
        mapping.designed_index = designed_val - 1;
    end
    
    % 半主动悬架
    semiactive_val = get(handles.semiactiveDropdown, 'Value');
    if semiactive_val > 1
        mapping.semiactive_index = semiactive_val - 1;
    end
    
    % 主动悬架
    active_val = get(handles.activeDropdown, 'Value');
    if active_val > 1
        mapping.active_index = active_val - 1;
    end
    
    % 参考控制器
    reference_val = get(handles.referenceDropdown, 'Value');
    if reference_val > 1
        mapping.reference_index = reference_val - 1;
    end
end

%% 更新映射状态显示
function updateMappingStatus(handles)
    mapping = getCurrentMapping(handles);
    
    status_lines = {};
    
    if isfield(mapping, 'passive_index')
        status_lines{end+1} = sprintf('🔵 被动悬架: 数据%d', mapping.passive_index);
    end
    
    if isfield(mapping, 'designed_index')
        status_lines{end+1} = sprintf('🎯 设计算法: 数据%d', mapping.designed_index);
    end
    
    if isfield(mapping, 'semiactive_index')
        status_lines{end+1} = sprintf('🟡 半主动: 数据%d', mapping.semiactive_index);
    end
    
    if isfield(mapping, 'active_index')
        status_lines{end+1} = sprintf('🟠 主动: 数据%d', mapping.active_index);
    end
    
    if isfield(mapping, 'reference_index')
        status_lines{end+1} = sprintf('🟣 参考: 数据%d', mapping.reference_index);
    end
    
    if isempty(status_lines)
        status_text = '(未设置)';
    else
        status_text = strjoin(status_lines, newline);
    end
    
    set(handles.mappingStatusText, 'String', status_text);
end
